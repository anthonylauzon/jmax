%{
#include <stdio.h>
#include <fts/fts.h>
#define YYSTYPE fts_atom_t
#include <ftsprivate/parserdata.h>

#define free fts_free

#define YYPARSE_PARAM data
#define YYLEX_PARAM data

#define yylex( lvalp, data) (*((fts_parser_data_t *)data)->yylex)( lvalp, data)

extern int fts_string_lex( YYSTYPE *lvalp, void *data);
extern int fts_atoms_lex( YYSTYPE *lvalp, void *data);

static int yyerror( const char *msg);
%}

%pure_parser
%token FTS_TOKEN_INT
%token FTS_TOKEN_FLOAT
%token FTS_TOKEN_SYMBOL
%token FTS_TOKEN_DOLLAR "$"
%token FTS_TOKEN_SEMICOLON ";"
%token FTS_TOKEN_LPAR "("
%token FTS_TOKEN_RPAR ")"
%token FTS_TOKEN_DOT "."
%token FTS_TOKEN_LSBRA "["
%token FTS_TOKEN_RSBRA "]"

%%

program: expression_list ;

expression_list: expression_list ";" expression 
	| expression ;

expression: tuple ;

tuple: tuple term
	| /* empty */ ;

term: primitive
	| invocation
	| "(" expression ")";

primitive: FTS_TOKEN_INT {}
	| FTS_TOKEN_FLOAT {}
	| FTS_TOKEN_SYMBOL {}
	| reference ;

reference: variable
	| array;

variable: "$" FTS_TOKEN_SYMBOL {} ;

arguments: arguments term
	   | /* empty */ ;

invocation: dot_expression arguments;

dot_expression: reference dot_list ;

dot_list: dot_list "." FTS_TOKEN_SYMBOL 
	| "." FTS_TOKEN_SYMBOL;

/*  inlet: INLET {}; */

array: variable "[" term "]" {} ;

%%

static int yyerror( const char *msg)
{
  fprintf( stderr, "%s\n", msg);

  return 0;
}

int fts_parse_atoms( int ac, fts_atom_t *at)
{
  fts_parser_data_t data;

  data.yylex = fts_atoms_lex;
  data.ac = ac;
  data.at = at;
  data.buffer = NULL;

  return yyparse( &data);
}

/*
  problem: the body of this function should be in scanner.c because
  it needs YY_BUFFER_STATE which is generated by flex.
*/
int fts_parse_string( const char *s)
{
  fts_parser_data_t data;
  data.yylex = fts_string_lex;
  data.ac = 0;
  data.at = NULL;
  data.buffer = (char *)s;

  return yyparse( &data);
}


