#!/bin/sh

##
## make-release SOURCE DEST ARCH [verbose]
##
## Take all the files from the SOURCE, assuming it is the top of a 
## fts repository, and generate in DEST a distribution for the ARCH architecture.
## if DEST do not exist, it is created; its parent must exists, anyway.
## In SOURCE (and recorsively under its directory), there must be a file 
## called distrib, containing a line for every file or directory to include
## in the distribution; each line must be in the format:
##
##    arch name [newname]
##
## Where arch must be an architecture name: if arch match the current architecture
## (i.e. the architecture name passed as argument) or it is the word "all", then
## the file or directory "name" is included in the distribution; if "newname" is
## specified, then the the file "name" is renamed to "newname" in the distribution;
## this is useful to include files whose content is architecture dependent.
##
## Making multi architecture is possible by simply calling make-release multiple times with
## different ARCH argument, and the same source and destination argument.
## make-release will never overwrite an existing file;
## to rewrite a distribution, you should delete it first.
##
## If the "verbose" flag (one Italian regional slang word for "verbose") is on, then it print
## a lot of information about what it is doing.



## Parameters

source=$1
destination=$2
architecture=$3
verbose=$4

## Make the distribution directory if it do not exists

if [ ! -d $destination ]
then
  mkdir $destination
fi

if [ -f $source/distrib ]
then
{
  read arch_filter name newname others

  if [ $verbose ] 
   then
      echo Read $arch_filter $name $newname $others
  fi

  while [ $arch_filter ] 
  do
   {
    if [ $arch_filter = $architecture ] || [ $arch_filter = "all" ]
    then
      {
      if [ -f "$source/$name" ]
       then
        {
	  if [ "$newname" ] 
 	  then
	     dstname=$destination/$newname ;
          else
	     dstname=$destination/$name ;
	  fi

	  if [ -f "$dstname" ]
	  then
	    echo File $dstname exists, not overwritten
	  else
	    if [ $verbose ] 
            then
	      echo Copying File "$source/$name" to "$dstname"
            fi
	    /bin/cp  -i "$source/$name" "$dstname"
	  fi
        }
      elif [ -d "$source/$name" ]
       then
        {
	  make-release $source/$name $destination/$name $architecture $verbose
        }
       else
	echo File or Directory "$name" not found 
      fi
     }
    else
      {
         if [ $verbose ] 
         then
	  echo Skipping "$name" because is not included in the current architecture
	 fi
      }
    fi

    read arch_filter name newname others

    if [ $verbose ] 
      then
      echo Read $arch_filter $name $newname $others
    fi
   }
  done
}  < $source/distrib
fi

