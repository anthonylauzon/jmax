package ircam.jmax.fts;

import java.io.*;
import java.net.*;
import com.oroinc.net.bsd.*;

/**
 * The datagram socket connection.
 * Implement a specialed connection using a datagram socket 
 * for communicating with FTS; start FTS thru the RExec protocol,
 * using the ORO NetCompoent library.
 */


class FtsRexecDatagramPort extends FtsPort
{
  final static private int max_packet_size = 256;
  RExecClient rexec;
  DatagramSocket socket = null;
  byte in_data[] = new byte[max_packet_size];
  byte out_data[] = new byte[max_packet_size];
  int in_fill_p = -1;           // point to the next char to read in in_data, -1 if no packet read yet.
  int out_fill_p = 0;		// point to the next free char in out_data
  DatagramPacket out_packet = new DatagramPacket(out_data, out_data.length);
  DatagramPacket in_packet;

  String host;
  String path = ".";
  String ftsName = "fts";

  FtsRexecDatagramPort(String host)
  {
    super(host);
    this.host = host;
  }

  void open()
  {
    String command;

    try
      {
	this.socket = new DatagramSocket();// look for a free port
      }
    catch (java.io.IOException e)
      {
	System.out.println("Error while opening server socket " + e);
      }



    try
      {
	rexec = new RExecClient();

	rexec.connect(InetAddress.getByName(host));

	command = (path + "/" + ftsName + " udp " +
		   InetAddress.getLocalHost().getHostAddress() + ":" + socket.getLocalPort());
      }
    catch (UnknownHostException e)
      {
	System.out.println("Cannot find host");
	return;
      }
    catch (SocketException e)
      {
	System.out.println("Socket Exception in connecting to" + host);
	return;
      }
    catch( IOException e)
      {
	System.out.println("IOException in connecting to" + host);
	return;
      }

    // Run FTS remotely

    try
      {
	rexec.rexec("dececco", "barbogio", command, true);
      }
    catch (IOException e)
      {
	System.out.println("Cannot rexec command: " + command);
	return;
      }

    // Wait a first answerback packet 
    // Its content is ignore, is used for startup syncronization
    // and to get the fts port number and address

    try
      {
	FtsErrorStreamer.startFtsErrorStreamer(rexec.getErrorStream());
	in_packet  = new DatagramPacket(in_data , in_data.length);
	socket.receive(in_packet);
	out_packet.setAddress(in_packet.getAddress());
	out_packet.setPort(in_packet.getPort());
      }
    catch (IOException e)
      {
	System.out.println("I/O error during accept on server socket");
	return;
      }    

    super.open();
  }

  void doClose()
  {
    socket.close();
    in_packet = null;
    out_packet = null;

    try
      {
	rexec.disconnect();
      }
    catch (IOException e)
      {
	// Ignore
      }
  }

  boolean isOpen()
  {
    return (socket != null);
  }


  void setParameter(String property, Object value)
  {
    if (property.equals("ftsdir") && (value instanceof String))
      {
	path = (String) value;
      }
    else if (property.equals("ftsname") && (value instanceof String))
      {
	ftsName = (String) value;
      }
  }

  void start()
  {
    open();
  }

  /** Method to send a char; since we can use datagram sockets or other
    means I/O is not necessarly done thru streams */

  protected void write(int data) throws java.io.IOException
  {
    out_data[out_fill_p++] = (byte) data;

    if (out_fill_p >= max_packet_size)
      flush();
  }

  /** Method to receive a char; since we can use datagram sockets or other
    means I/O is not necessarly done thru streams */

  protected int read() throws java.io.IOException
  {
    int c;

    if (in_fill_p == -1)
      {
	in_packet  = new DatagramPacket(in_data , in_data.length);

	try
	  {
	    socket.receive(in_packet);
	  }
	catch (Exception e)
	  {
	    System.err.println("Exception in receive " + e);
	  }

	in_fill_p = 0;
      }

    c = in_data[in_fill_p++];

    if (in_fill_p >= in_packet.getLength())
      in_fill_p = -1;

    return c;
  }

  /** Method to Ask for an explicit output flush ; since we
    can use datagram sockets or other means I/O is not necessarly done
    thru streams */

  void flush() throws java.io.IOException
  {
    out_packet.setLength(out_fill_p);
    socket.send(out_packet);
    out_fill_p = 0;
  }
}




