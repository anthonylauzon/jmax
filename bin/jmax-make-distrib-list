#!/bin/sh
##
## jmax-make-distrib-list SOURCE ARCH
##
## Take all the files from the SOURCE, assuming it is the top of a 
## Max repository, and generate a distribution list for the ARCH architecture.
## In SOURCE (and recorsively under its directory), there must be a file 
## called distrib, containing a line for every file or directory to include
## in the distribution; each line must be in the format:
##
##    arch name [newname]
##
## Where arch must be an architecture name: if arch match the current architecture
## (i.e. the architecture name passed as argument) or it is the word "all", then
## the file or directory "name" is included in the distribution; if "newname" is
## specified, then the the file "name" is renamed to "newname" in the distribution;
## this is useful to include files whose content is architecture dependent.
##
## Making multi architecture is possible by simply calling make-distrib multiple times with
## different ARCH argument, and the same source and destination argument.
## make-distrib will never overwrite an existing file;
## to rewrite a distribution, you should delete it first.
##

help ()
{
    cat >&2 << HELP_EOF

Usage:
    jmax-make-distrib-list  -arch <arch>  -type <type> [-verbose] <directory>

Writes on its standard output a list of files needed by jMax release
for architecture ``arch'' and of type ``type''
This script is not intended for direct use, it is called by jmax-make-release.

Options and arguments:
  -arch <architecture>           (mandatory)
    defines the architecture of the release (origin, linuxpc, ...)
  -type <type>                   (mandatory)
    defines the type of the release (free, forum, ...)
  <directory>                    (mandatory)
    defines the source directory from which to start the list

HELP_EOF
}

check_permissions ()
{
    if ls -l $1 | awk '{ exit substr($1,2,1)!="r"; }'
    then
	if ls -l $1 | awk '{ exit substr($1,8,1)=="r"; }'
 	then
 	    if chmod go+r $1
 	    then
 		echo "Warning: $1 was not readable by others (corrected)" >&2
 	    else
 		echo "Error: $1 is not readable by others (cannot correct)" >&2
		exit 2
 	    fi
 	fi
    fi

    if ls -l $1 | awk '{ exit substr($1,4,1)!="x"; }'
    then
	if ls -l $1 | awk '{ exit substr($1,10,1)=="x"; }'
 	then
	    if chmod go+x $1
	    then
		echo "Warning: $1 was not executable by others (corrected)" >&2
	    else
		echo "Error: $1 is not executable by others (cannot correct)" >&2
		exit 2
	    fi
 	fi
    fi
}

OPT="none"
ARCH="none"
TYPE="none"
DIR="none"

for ARG in $@
do
    if [ $OPT = "none" ]
    then
	case $ARG in
	\-arch | \-type )
	    OPT=$ARG ;;
	\-verbose )
	    VERBOSE="-verbose" ;;
	\-help | \-h | \-\? )
	    help ;
	    exit 2 ;;
	*)
	    if [ $DIR = "none" ]
	    then
		DIR=$ARG
	    else
		help
		exit 2
	    fi ;;
	esac
    else
	case $OPT in
	\-arch )
	    ARCH=$ARG ;;
	\-type )
	    TYPE=$ARG
	esac
	OPT="none";
    fi
done

# Check that we have what we need
case $ARCH in
none )
    help ;
    exit 2 ;;
esac

case $TYPE in
none )
    help ;
    exit 2 ;;
esac

case $DIR in
none )
    help ;
    exit 2 ;;
esac

## Parameters

if [ -f $DIR/distrib ]
then
    {
	read ARCH_FILTER TYPE_FILTER NAME OTHERS
	
	if [ $VERBOSE ] 
	then
	    echo Read $ARCH_FILTER $TYPE_FILTER $NAME >&2
	fi

	while [ $ARCH_FILTER ] 
	do
	    {
		if [ $ARCH_FILTER = $ARCH ] || [ $ARCH_FILTER = "all" ]
		then 
		    if [ $TYPE_FILTER = $TYPE ] || [ $TYPE_FILTER = "all" ]
		    then
			{
			    if [ -f "$DIR/$NAME" ]
			    then
				check_permissions $DIR/$NAME
				if [ $VERBOSE ] 
				then
				    echo File $DIR/$NAME >&2
				fi
				echo $DIR/$NAME
			    elif [ -d "$DIR/$NAME" ]
			    then
				if [ $VERBOSE ] 
				then
				    echo Directory $DIR/$NAME >&2
				fi
				jmax-make-distrib-list -arch $ARCH -type $TYPE $VERBOSE $DIR/$NAME
			    else
				echo "File or directory $DIR/$NAME not found" >&2
			    fi
			}
		    fi
		fi

		read ARCH_FILTER TYPE_FILTER NAME OTHERS

		if [ $VERBOSE ] 
		then
		    echo Read $ARCH_FILTER $TYPE_FILTER $NAME >&2
		fi

	    }
	done
    }  < $DIR/distrib
fi

