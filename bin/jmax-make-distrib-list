#!/bin/sh
##
## jmax-make-distrib-list SOURCE ARCH
##
## Take all the files from the SOURCE, assuming it is the top of a 
## Max repository, and generate a distribution list for the ARCH architecture.
## In SOURCE (and recorsively under its directory), there must be a file 
## called distrib, containing a line for every file or directory to include
## in the distribution; each line must be in the format:
##
##    arch name [newname]
##
## Where arch must be an architecture name: if arch match the current architecture
## (i.e. the architecture name passed as argument) or it is the word "all", then
## the file or directory "name" is included in the distribution; if "newname" is
## specified, then the the file "name" is renamed to "newname" in the distribution;
## this is useful to include files whose content is architecture dependent.
##
## Making multi architecture is possible by simply calling make-distrib multiple times with
## different ARCH argument, and the same source and destination argument.
## make-distrib will never overwrite an existing file;
## to rewrite a distribution, you should delete it first.
##

help ()
{
    cat >&2 << HELP_EOF

Usage:
    jmax-make-distrib-list  -arch <arch>  -type <type> [-verbose] [-check-permission] <directory>

Writes on its standard output a list of files needed by jMax distribution
for architecture ``arch'' and of type ``type''
This script is called by jmax-make-release and jmax-tar-distrib.

Options and arguments:
  -arch <architecture>           (mandatory)
    defines the architecture of the release (origin, linuxpc, ...)
  -type <type>                   (mandatory)
    defines the type of the release (free, forum, ...)
  -check-permission              (optional)
    checks permissions of source file and changes it, according to:
	. if file is readable by user, it is made readable by all
	. if file is executable by user, it is made executable by all
  <directory>                    (optional)
    defines the source directory from which to start the list
    Default: .

HELP_EOF
}

check_permissions ()
{
    LLS=`ls -l $1`

    if echo $LLS | awk '{ exit ( !(substr($1,2,1)=="r" && substr($1,8,1)!="r")); }'
    then
	if chmod o+r $1
 	then
	    echo "Warning: $1 was not readable by others (corrected)" >&2
 	else
	    echo "Error: $1 is not readable by others (cannot correct)" >&2
	    exit 2
	fi
    fi

    if echo $LLS | awk '{ exit ( !(substr($1,4,1)=="x" && substr($1,10,1)!="x")); }'
    then
	if chmod o+x $1
	then
	    echo "Warning: $1 was not executable by others (corrected)" >&2
	else
	    echo "Error: $1 is not executable by others (cannot correct)" >&2
	    exit 2
	fi
    fi
}

# args: ARCH TYPE DIR
do_it_non_verbose_no_check ()
{
    if [ \! -f $3/distrib ]; then echo "File $3/distrib missing" >&2 ; exit 1 ; fi

    sed "s/ARCH/$1/" < $3/distrib | {
	read ARCH_F TYPE_F NAME OTHERS
	while [ $ARCH_F ] 
	do
	    if [ \( $ARCH_F = $1 -o $ARCH_F = "all" \) -a \( $TYPE_F = $2 -o $TYPE_F = "all" \) ]
	    then
		if [ -f "$3/$NAME" ]
		then
		    echo $3/$NAME
		elif [ -d "$3/$NAME" ]
		then
		    do_it_non_verbose_no_check $1 $2 $3/$NAME
		else
		    echo "File or directory $3/$NAME not found" >&2
		fi
	    fi
	    read ARCH_F TYPE_F NAME OTHERS
	done
    } 
}

# args: ARCH TYPE DIR
do_it_non_verbose_check ()
{
    if [ \! -f $3/distrib ]; then echo "File $3/distrib missing" >&2 ; exit 1 ; fi

    sed "s/ARCH/$1/" < $3/distrib | {
	read ARCH_F TYPE_F NAME OTHERS
	while [ $ARCH_F ] 
	do
	    if [ \( $ARCH_F = $1 -o $ARCH_F = "all" \) -a \( $TYPE_F = $2 -o $TYPE_F = "all" \) ]
	    then
		if [ -f "$3/$NAME" ]
		then
		    check_permissions $3/$NAME
		    echo $3/$NAME
		elif [ -d "$3/$NAME" ]
		then
		    do_it_non_verbose_check $1 $2 $3/$NAME
		else
		    echo "File or directory $3/$NAME not found" >&2
		fi
	    fi
	    read ARCH_F TYPE_F NAME OTHERS
	done
    }
}

# args: ARCH TYPE DIR
do_it_verbose_check ()
{
    if [ \! -f $3/distrib ]; then echo "File $3/distrib missing" >&2 ; exit 1 ; fi

    sed "s/ARCH/$1/" < $3/distrib | {
	read ARCH_F TYPE_F NAME OTHERS
	if [ $VERBOSE ] ; then echo Read $ARCH_F $TYPE_F $NAME >&2 ; fi

	while [ $ARCH_F ] 
	do
	    if [ \( $ARCH_F = $1 -o $ARCH_F = "all" \) -a \( $TYPE_F = $2 -o $TYPE_F = "all" \) ]
	    then
		if [ -f "$3/$NAME" ]
		then
		    if [ $VERBOSE ] ; then echo File $3/$NAME >&2 ; fi
		    check_permissions $3/$NAME
		    echo $3/$NAME
		elif [ -d "$3/$NAME" ]
		then
		    if [ $VERBOSE ] ; then echo Directory $3/$NAME >&2 ; fi
		    do_it_verbose_check $1 $2 $3/$NAME
		else
		    echo "File or directory $3/$NAME not found" >&2
		fi
	    fi
	    read ARCH_F TYPE_F NAME OTHERS
	    if [ $VERBOSE ] ; then echo Read $ARCH_F $TYPE_F $NAME >&2 ; fi
	    done
    }
}

# args: ARCH TYPE DIR
do_it_verbose_no_check ()
{
    if [ \! -f $3/distrib ]; then echo "File $3/distrib missing" >&2 ; exit 1 ; fi

    sed "s/ARCH/$1/" < $3/distrib | {
	read ARCH_F TYPE_F NAME OTHERS
	if [ $VERBOSE ] ; then echo Read $ARCH_F $TYPE_F $NAME >&2 ; fi

	while [ $ARCH_F ] 
	do
	    if [ \( $ARCH_F = $1 -o $ARCH_F = "all" \) -a \( $TYPE_F = $2 -o $TYPE_F = "all" \) ]
	    then
		if [ -f "$3/$NAME" ]
		then
		    if [ $VERBOSE ] ; then echo File $3/$NAME >&2 ; fi
		    echo $3/$NAME
		elif [ -d "$3/$NAME" ]
		then
		    if [ $VERBOSE ] ; then echo Directory $3/$NAME >&2 ; fi
		    do_it_verbose_no_check $1 $2 $3/$NAME
		else
		    echo "File or directory $3/$NAME not found" >&2
		fi
	    fi
	    read ARCH_F TYPE_F NAME OTHERS
	    if [ $VERBOSE ] ; then echo Read $ARCH_F $TYPE_F $NAME >&2 ; fi
	    done
    }
}


OPT="none"
ARCH="none"
TYPE="none"
VERBOSE=
CHECK_PERMISSION=
DIR=.

for ARG in $@
do
    if [ $OPT = "none" ]
    then
	case $ARG in
	\-arch | \-type )
	    OPT=$ARG ;;
	\-verbose )
	    VERBOSE="yes" ;;
	\-check-permission )
	    CHECK_PERMISSION="true" ;;
	\-help | \-h | \-\? )
	    help ;
	    exit 2 ;;
	*)
	    if [ $DIR = . ]
	    then
		DIR=$ARG
	    else
		help
		exit 2
	    fi ;;
	esac
    else
	case $OPT in
	\-arch )
	    ARCH=$ARG ;;
	\-type )
	    TYPE=$ARG
	esac
	OPT="none";
    fi
done

# Check that we have what we need
if [ $ARCH = "none" ]
then
    help
    exit 2
fi

if [ $TYPE = "none" ]
then
    help
    exit 2
fi

if [ $VERBOSE ]
then
    if [ $CHECK_PERMISSION ]
    then
	do_it_verbose_check $ARCH $TYPE $DIR
    else
	do_it_verbose_no_check $ARCH $TYPE $DIR
    fi
else
    if [ $CHECK_PERMISSION ]
    then
	do_it_non_verbose_check $ARCH $TYPE $DIR
    else
	do_it_non_verbose_no_check $ARCH $TYPE $DIR
    fi
fi

