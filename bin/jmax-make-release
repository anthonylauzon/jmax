#!/bin/sh
#
#  jMax
#  
#  Copyright (C) 1999 by IRCAM
#  All rights reserved.
#  
#  This program may be used and distributed under the terms of the 
#  accompanying LICENSE.
# 
#  This program is distributed WITHOUT ANY WARRANTY. See the LICENSE
#  for DISCLAIMER OF WARRANTY.
#  


help ()
{
    cat >&2 << HELP_EOF

Usage:
    jmax-make-release -type <type> [-type <type> ...] -arch <arch> [-arch <arch> ...]
	[-tar <tar-command>]

Makes a release of jMax.

Options:
  -type <type>                 (mandatory)
    defines the types of the release (free, forum, ...)
  -arch <arch>                 (mandatory)
    defines the architectures of the release (origin, linuxpc, ...)
  -tar <tar-command>           (optional)
    defines tar command to use (gnutar, /usr/local/bin/tar, ...)
    WARNING: this script relies on the -T - option of the used tar command.
    Default: gnutar.

What is does ?
The \`\`release process'' is made of the following steps:
  - check that all files are synchronous with the CVS repository
  - check that nothing needs to be recompiled
  - for each architecture { for each type { create the distribution list }}
  - for each architecture { for each type { create the tar file } }
  - tag the sources with a tag that contains the version number
  - generates a new version number
  - send a mail to the development team telling that the release has been created

Notes:
 - as this script uses intensively CVS, it checks that it runs on a machine
   that has a valid CVS installation.

HELP_EOF
}

# ---------------------------------------------------------------------------
# Constants
HOST_FOR_CVS=maelzel
TARFILES_DIR=/u/worksta/jmax/release

# ---------------------------------------------------------------------------
# Options decrypting
OPT="none"
ARCHS=""
TYPES=""
TAR="tar"

for ARG in $@
do
    if [ $OPT = "none" ]
    then
	case $ARG in
	\-arch | \-tar | \-type )
	    OPT=$ARG ;;
	\-norecompile )
	    NORECOMPILE=$ARG ;;
	\-help | \-h | \-\? )
	    help ;
	    exit 2 ;;
	*)
	    help ;
	    exit 2 ;;
	esac
    else
	case $OPT in
	\-arch )
	    ARCHS="${ARCHS} $ARG" ;;
	\-type )
	    TYPES="${TYPES} $ARG" ;;
	\-tar )
	    TAR=$ARG ;;
	esac
	OPT="none";
    fi
done

# ---------------------------------------------------------------------------
# Check that we have what we need
if [ _"${ARCHS}"_ = __  -o  _"${TYPES}"_ = __ ]
then
    help
    exit 2
fi

if [ \! -r VERSION ]
then
    echo "Cannot find file VERSION (probably you're not in the correct directory ...)"
    exit 1
fi

if $TAR --version | grep -s GNU >/dev/null 
then
    echo > /dev/null
else
    echo $TAR is not GNU tar. $TAR must support the -T option.
    exit 2
fi

# ---------------------------------------------------------------------------
# - check that all files are synchronous with the CVS repository
if cvs -n update | egrep -s '^[UARMC] '
then
    echo "Working directory is not synchronized with repository."
    echo "Do \`\`cvs update'' and retry"
    exit 1
fi

# ---------------------------------------------------------------------------
# - check that nothing needs to be recompiled
for ARCH in $ARCHS
do
    if make -q ARCH=$ARCH MODE=opt all
    then
	echo > /dev/null
    else
	echo "$ARCH must be recompiled."
	echo "Do ``make ARCH=$ARCH MODE=opt clean all'' and retry"
	exit 1
    fi
done

# ---------------------------------------------------------------------------
# Generate the version number
VERSION_NUMBER=`awk '
$1=="MAJOR" {m=$2;} 
$1=="MINOR" {n=$2;}
$1=="PATCH_LEVEL" {p=$2;}
END { printf("%d.%d.%d\n",m,n,p);}
' VERSION`

# ---------------------------------------------------------------------------
# - for each type { for each architecture { create the tar file } }
for TYPE in $TYPES
do
    for ARCH in $ARCHS
    do
	TARFILE=$(TARFILES_DIR)/jmax.${TYPE}.${ARCH}.${VERSION_NUMBER}.tar.gz
	if [ -f $(TARFILE) ]
	then
	    echo "File $TARFILE already exists. Not overwritten"
	    exit 1
	fi
    done
done

for TYPE in $TYPES
do
    for ARCH in $ARCHS
    do
	TARFILE=$(TARFILES_DIR)/jmax.${TYPE}.${ARCH}.${VERSION_NUMBER}.tar.gz
	echo "Creating tar file $TARFILE for arch $ARCH and type $TYPE"
	jmax-make-distrib-list -arch $ARCH -type $TYPE . | sed 's/^./\.\/max/' > /tmp/$$
	(cd .. ; tar cvf - -T /tmp/$$ | gzip > $TARFILE )
    done
done

# ---------------------------------------------------------------------------
# - tag the sources with a tag that contains the version number
TAG=`echo $VERSION_NUMBER | sed -e 's/^/V_/' -e 's/\./_/g'`
echo "... Tagging sources with tag $TAG"
cvs tag -F $TAG

# ---------------------------------------------------------------------------
# - generates a new version number
echo "... Generating new version number"
jmax-make-new-version -type patch -nomail

# ---------------------------------------------------------------------------
# - send a mail to the development team telling that the release has been created
TEAM="dechelle@ircam.fr dececco@ircam.fr maggi@ircam.fr schnell@ircam.fr"
echo "... Sending a mail to $TEAM"
{
    echo "The following files have been created:"
    for ARCH in $ARCHS
    do
	for TYPE in $TYPES
	do
	    echo "/u/worksta/jmax/release/jmax.${ARCH}.${TYPE}.${VERSION_NUMBER}.tar.gz"
	done
    done
} > /tmp/$$
Mail -s "jMax version $VERSION_NUMBER released" $TEAM < /tmp/$$
cat /tmp/$$

# Done

