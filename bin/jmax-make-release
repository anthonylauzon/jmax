#!/bin/sh
#
#  jMax
#  
#  Copyright (C) 1999 by IRCAM
#  All rights reserved.
#  
#  This program may be used and distributed under the terms of the 
#  accompanying LICENSE.
# 
#  This program is distributed WITHOUT ANY WARRANTY. See the LICENSE
#  for DISCLAIMER OF WARRANTY.
#  
#
# $Log$

# ***************************************************************************
# Constants
# ***************************************************************************


# ***************************************************************************
# Functions
# ***************************************************************************

# ---------------------------------------------------------------------------
help ()
{
    cat >&2 << HELP_EOF

Usage:
    jmax-make-release -type <type> [-type <type> ...] -arch <arch> [-arch <arch> ...]

Prepares a distribution of jMax.

Options:
  -type <type>                 (mandatory)
    defines the types of the release (free, forum, ...)
  -arch <arch>                 (mandatory)
    defines the architectures of the release (origin, linuxpc, ...)

Description:
The script runs the following steps:
  - check that all files are synchronous with the CVS repository
  - check that nothing needs to be recompiled
  - tag the sources with a tag that contains the version number
  - for each architecture { for each type { create the tar file } }

Notes:
 - as this script uses intensively CVS, it checks that it runs on a machine
   that has a valid CVS installation.

HELP_EOF
}

# ---------------------------------------------------------------------------
decrypt_options ()
{
    OPT="none"
    ARCHS=""
    TYPES=""
    TAR="tar"

    for ARG in $@
    do
	if [ $OPT = "none" ]
	then
	    case $ARG in
	    \-arch | \-type )
		OPT=$ARG ;;
	    \-help | \-h | \-\? )
		help ;
		exit 2 ;;
	    *)
		help ;
		exit 2 ;;
	    esac
	else
	    case $OPT in
	    \-arch )
		ARCHS="${ARCHS} $ARG" ;;
	    \-type )
		TYPES="${TYPES} $ARG" ;;
	    esac
	    OPT="none";
	fi
    done
}

# ---------------------------------------------------------------------------
check_options()
{
    if [ _"${ARCHS}"_ = __  -o  _"${TYPES}"_ = __ ]
    then
	help
	exit 2
    fi

    if [ \! -r VERSION ]
    then
	echo "Cannot find file VERSION (probably you're not in the correct directory ...)"
	exit 1
    fi

}

# ---------------------------------------------------------------------------
# Check that all files are synchronous with the CVS repository
check_cvs_sync ()
{
    if cvs -n update | egrep -s '^[UARMC] '
    then
	echo "Working directory is not synchronized with repository: update and retry..."
	exit 1
    fi
}

# ---------------------------------------------------------------------------
# Check that nothing needs to be recompiled
check_recompile ()
{
    for ARCH in $ARCHS
    do
	if make -q ARCH=$ARCH MODE=opt all  > /dev/null 2>&1 || (exit 0)
	then
	    echo "$ARCH must be recompiled: recompile and retry..."
	    exit 1
	fi
    done
}

# ---------------------------------------------------------------------------
# Generate the version number
VERSION_NUMBER=`awk '
$1=="MAJOR" {m=$2;} 
$1=="MINOR" {n=$2;}
$1=="PATCH_LEVEL" {p=$2;}
END { printf("%d.%d.%d\n",m,n,p);}
' VERSION`

# ---------------------------------------------------------------------------
create_tars ()
{
    # - for each type { for each architecture { create the tar file } }
    for TYPE in $TYPES
    do
	for ARCH in $ARCHS
	do
	    echo zob
	done
    done
}

# ---------------------------------------------------------------------------
tag_files ()
{
    TAG=`echo $VERSION_NUMBER | sed -e 's/^/V_/' -e 's/\./_/g'`
    echo "... Tagging sources with tag $TAG"
    cvs tag -F $TAG
}

# ***************************************************************************
# Beginning of script
# ***************************************************************************

decrypt_options $@

check_options

check_cvs_sync

check_recompile

tag_files

create_tars

bye
