#!/bin/sh
# 
# jMax
# Copyright (C) 1999 by IRCAM
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# See file LICENSE for further informations on licensing terms.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# 
# Authors: Maurizio De Cecco, Francois Dechelle, Enzo Maggi, Norbert Schnell.
#



# ***************************************************************************
# Functions
# ***************************************************************************

# ---------------------------------------------------------------------------
usage ()
{
    cat >&2 << HELP_EOF

Usage:
    jmax-tar-distrib -type <type> -arch <arch> [-tmp <dir>] [-quiet] <file>

Creates a tar file of a distribution for architecture <arch> and type <type>.

Options:
  -type <type>                 (mandatory)
    create release type <type> (free, ircam, src, ...)
  -arch <arch>                 (mandatory)
    create release for architecture <arch> (sgi, linuxpc, ...)
  -tmp <dir>                   (optional)
    use <dir> as temporary directory. Defaults to /tmp
  -verbose                     (optional)
    print more messages
  -quiet                       (optional)
    do not exit if a file is missing

Arguments:
  <file>                       (optional)
    creates tar file <file>.

HELP_EOF

    exit 2
}

# ---------------------------------------------------------------------------
decrypt_options ()
{
    OPT="none"
    ARCH="none"
    TYPE="none"
    TMP="/tmp"
    QUIET="false"
    VERBOSE="false"
    TARFILE="none"

    for ARG in $@
    do
	if [ $OPT = "none" ]
	then
	    case $ARG in
	    \-arch | \-type | \-tmp )
		OPT=$ARG ;;
	    \-quiet )
		QUIET="true" ;;
	    \-verbose )
		VERBOSE="true" ;;
	    *)
		if [ $TARFILE = "none" ]
		then
		    TARFILE=$ARG
		else
		    usage
		fi ;;
	    esac
	else
	    case $OPT in
	    \-arch )
		ARCH=$ARG ;;
	    \-type )
		TYPE=$ARG ;;
	    \-tmp )
		TMP=$ARG ;;
	    \-dest )
		TARFILE=$ARG ;;
	    esac
	    OPT="none";
	fi
    done
}

# ---------------------------------------------------------------------------
check_options ()
{
    if [ $ARCH = "none" ]
    then
	usage
    fi

    if [ $TYPE = "none" ]
    then
	usage
    fi

    if [ $TARFILE = "none" ]
    then
	usage
    fi
}

# ---------------------------------------------------------------------------
create_dest_dir()
{
    DEST_DIR=${TMP}/$$
    if [ -d ${DEST_DIR} ]
    then
	/bin/rm -rf ${DEST_DIR}
    fi
    mkdir -p ${DEST_DIR}
    chmod 755 ${DEST_DIR}
}

# ---------------------------------------------------------------------------
remove_dest_dir()
{
    /bin/rm -rf ${TMP}/$$
}


# ---------------------------------------------------------------------------
# args: STATUS
clean_exit()
{
	remove_dest_dir
	exit $1
}

# ---------------------------------------------------------------------------
# args: TYPE ARCH RELATIVE_DIR PATTERN
copy_files()
{
    for F in `ls -d $4`
    do
	if [ -f $F ]
  	then

  	    DST=${3}$F

  	    D=`dirname $DST`
  	    if [ ! -d $DEST_DIR/$D ]
  	    then
  		mkdir -p $DEST_DIR/$D
  	    fi

  	    cp $F $DEST_DIR/$DST

  	elif [ -d $F ]
  	then

  	    mkdir -p $DEST_DIR/${3}$F
  	    (cd $F ; select_files $1 $2 ${3}$F/ )

  	else

  	    echo "file or directory $F not found" >&2

  	    if [ $QUIET = "false" ]
  	    then
  		clean_exit 1
  	    fi
  	fi
      done
}


# ---------------------------------------------------------------------------
# args: TYPE ARCH RELATIVE_DIR
select_files ()
{
    if [ \! -f distrib ]
    then
	echo "file ${3}distrib missing" >&2
	exit 1
    fi

      {
	if [ $VERBOSE != "false" ]
	then
	    echo Processing \"$3\"
	fi

  	read TYPE_F ARCH_F PATTERN NEW_NAME

  	while [ $TYPE_F ] 
  	do
  	    if [ \( $TYPE_F = $1 -o $TYPE_F = "all" \) -a \( $ARCH_F = $2 -o $ARCH_F = "all" \) ]
  	    then
  		copy_files $1 $2 "$3" "$PATTERN"
  	    fi

  	    read TYPE_F ARCH_F PATTERN NEW_NAME
  	done
      } < distrib

}

# ---------------------------------------------------------------------------
set_correct_permissions ()
{
    ( cd $DEST_DIR ; 
	find . -type f \( \( -perm -700 -exec chmod 755 {} \; \) -o \( -perm -600 -exec chmod 644 {} \; \) \) )
    ( cd $DEST_DIR ; find . -type d -exec chmod 755 {} \; )
}

# ---------------------------------------------------------------------------
# Create the tar file
# args: TARFILE
create_tar ()
{
    if [ $VERBOSE != "false" ]
    then
	echo "creating tar file $1"
    fi

    (cd ${DEST_DIR} ; tar cf - * ) | gzip -9 > $1

    chmod 444 $1
}

# ***************************************************************************
# Beginning of script
# ***************************************************************************

decrypt_options $@

check_options

create_dest_dir

select_files $TYPE $ARCH ''

set_correct_permissions

create_tar $TARFILE

clean_exit 0
