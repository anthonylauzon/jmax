#!/bin/sh
#
#  jMax
#  
#  Copyright (C) 1999 by IRCAM
#  All rights reserved.
#  
#  This program may be used and distributed under the terms of the 
#  accompanying LICENSE.
# 
#  This program is distributed WITHOUT ANY WARRANTY. See the LICENSE
#  for DISCLAIMER OF WARRANTY.
#  


# ***************************************************************************
# Constants
# ***************************************************************************
RELEASES_DIR=/u/worksta/jmaxdev/releases

# ***************************************************************************
# Functions
# ***************************************************************************

# ---------------------------------------------------------------------------
help ()
{
    cat >&2 << HELP_EOF

Usage:
    jmax-tar-distrib -type <type> -arch <arch> [-dest <file>] [-tmp <dir>]

Creates tar file of jMax distribution for architecture <arch> and type <type>.

Options:
  -type <type>                 (mandatory)
    create release type <type> (free, ircam, src, ...)
  -arch <arch>                 (mandatory)
    create release for architecture <arch> (sgi, linuxpc, ...)
  -dest <file>                 (optional)
    creates tar file <file>.
  -tmp <dir>                   (optional)
    use <dir> as temporary directory. Defaults to /tmp
  -quiet                       (optional)
    don't exit if a file is missing

HELP_EOF
}

# ---------------------------------------------------------------------------
decrypt_options ()
{
    OPT="none"
    ARCH="none"
    TYPE="none"
    DEST_FILE="none"
    TMP="/tmp"
    QUIET="false"

    for ARG in $@
    do
	if [ $OPT = "none" ]
	then
	    case $ARG in
	    \-arch | \-type | \-dest | \-tmp )
		OPT=$ARG ;;
	    \-quiet )
		QUIET="true" ;;
	    *)
		help ;
		exit 2 ;;
	    esac
	else
	    case $OPT in
	    \-arch )
		ARCH=$ARG ;;
	    \-type )
		TYPE=$ARG ;;
	    \-tmp )
		TMP=$ARG ;;
	    \-dest )
		DEST_FILE=$ARG ;;
	    esac
	    OPT="none";
	fi
    done
}

# ---------------------------------------------------------------------------
check_options ()
{
    if [ $ARCH = "none" ]
    then
	help
	exit 2
    fi

    if [ $TYPE = "none" ]
    then
	help
	exit 2
    fi

    if [ \! -r VERSION ]
    then
	echo "Cannot find file VERSION (probably you're not in the correct directory ...)"
	exit 1
    fi

}

# ---------------------------------------------------------------------------
compute_version_number ()
{
    MAJOR=`awk '$1=="MAJOR" { print $2; }' VERSION`
    MINOR=`awk '$1=="MINOR" { print $2; }' VERSION`
    PATCH_LEVEL=`awk '$1=="PATCH_LEVEL" { print $2; }' VERSION`

    VERSION=$MAJOR.$MINOR.$PATCH_LEVEL
}

# ---------------------------------------------------------------------------
create_dest_dir()
{
    DEST_DIR=${TMP}/$$/max-${VERSION}
    if [ -d ${DEST_DIR} ]
    then
	/bin/rm -rf ${DEST_DIR}
    fi
    mkdir -p ${DEST_DIR}
    chmod 755 ${DEST_DIR}
}

# ---------------------------------------------------------------------------
remove_dest_dir()
{
    /bin/rm -rf ${TMP}/$$
}


# ---------------------------------------------------------------------------
# args: DIR
chmod_dir ()
{
    i=$DEST_DIR
    for d in `echo $1 | sed 's/\// /g'`
    do
	i="$i/$d"
	echo chmod 755 "$i"
	chmod 755 $i
    done
}

# ---------------------------------------------------------------------------
# args: ARCH TYPE DIR
copy_files ()
{
    if [ \! -f $3/distrib ]
    then
	echo "File $3/distrib missing" >&2
	remove_dest_dir
	exit 1
    fi

    {
	read TYPE_F ARCH_F NAME NEW_NAME
	#echo read $TYPE_F $ARCH_F $NAME $NEW_NAME "<" $3/distrib

	while [ $ARCH_F ] 
	do
	    if [ \( $ARCH_F = $1 -o $ARCH_F = "all" \) -a \( $TYPE_F = $2 -o $TYPE_F = "all" \) ]
	    then
		if [ -f "$3/$NAME" ]
		then

		    F=`echo $3/$NAME | sed 's/^\.\///'`
		    D=`dirname $F`
		    if [ ! -d $DEST_DIR/$D ]
		    then
			mkdir -p $DEST_DIR/$D
			echo "Created $DEST_DIR/$D"
			chmod_dir $D
		    fi

		    if [ $NEW_NAME ]
		    then
			DST=$DEST_DIR/$NEW_NAME
		    else
			DST=$DEST_DIR/$F
		    fi

		    cp $F $DST
		    echo "Copyied $DST"
		    if ls -l $F | awk '{ exit(!(substr($1,4,1)=="x")); }'
		    then
			chmod 755 $DST
		    else
			chmod 644 $DST
		    fi

		elif [ -d "$3/$NAME" ]
		then

		    D=`echo $3/$NAME | sed 's/^\.\///'`
		    mkdir -p $DEST_DIR/$D
		    echo "Created $DEST_DIR/$D"
#		    chmod 755 $4/$NAME
		    chmod_dir $D
		    copy_files $1 $2 $D

		else

		    echo "File or directory $3/$NAME not found" >&2

		    if [ $QUIET = "false" ]
		    then
		        remove_dest_dir
			exit 2
		    fi

		fi
	    fi
	    read TYPE_F ARCH_F NAME NEW_NAME
	    #echo read $TYPE_F $ARCH_F $NAME $OTHERS "<" $3/distrib
	done
    } < $3/distrib
}

# ---------------------------------------------------------------------------
# Create the tar file
create_tar ()
{
    if [ $DEST_FILE != "none" ]
    then
	echo "(A) Creating tar file $DEST_FILE"
	(cd ${DEST_DIR}/.. ; tar cvf - max-${VERSION} ) | gzip -9 > $DEST_FILE
    else
	TARDIR=${RELEASES_DIR}/${VERSION}
	if [ ! -d ${TARDIR} ]
	then
	    mkdir -p ${TARDIR}
	fi
	if [ ! -w ${TARDIR} ]
	then
	    chmod u+w ${TARDIR}
	fi

	TARFILE=${TARDIR}/jmax.${TYPE}.${ARCH}.${VERSION}.tar.gz

	if [ ! -w ${TARFILE} ]
	then
	    chmod u+w ${TARFILE}
	fi

	echo "(B) Creating tar file $TARFILE"
	(cd ${DEST_DIR}/.. ; tar cvf - max-${VERSION} ) | gzip -9 > $TARFILE

	chmod 444 ${TARFILE}
	chmod 555 ${TARDIR}
    fi
}

# ***************************************************************************
# Beginning of script
# ***************************************************************************

decrypt_options $@

check_options

compute_version_number

create_dest_dir

copy_files $ARCH $TYPE .

create_tar

remove_dest_dir
