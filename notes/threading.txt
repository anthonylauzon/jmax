
A proposal for introducing multi-threading in FTS

1- Context

Apart from spliting heavy control computations in different threads, in order to be able to run them without interrupting DSP, the need for multi-theading FTS is introduced by the Mac OS X porting. On Mac OS X, the audio IOProc runs the FTS scheduler and the different I/O (client in particular) must be done in different threads, even if they are made non-blocking using select(). The same condition arises with MIDI, where the MIDI input is done by a callback.

The idea is then to run the FTS scheduler in a "main thread" (the CoreAudio IOProc on Mac OS X, the JACK callback on Linux or an emulation using a blocking audio I/O) and to run the I/O (client in particular), now put in blocking mode, in different threads.

The I/O threads would then communicate with the main thread using FIFOs, the content of these FIFOs remaining to decide.

In this framework, the MIDI callback would be considered as a separate thread. However, this thread would not be created by FTS but by CoreMIDI.



2- Differents types of FTS thread

In order to identify the required functionnalities, we try to make a list of differents possible threads that can be used inside FTS.

2-1 Client thread

The client thread listens to the client connections and reads protocol bytes on the opened connections. This can be achieved:
 - by one thread doing a blocking select()
 - by a pool of threads, one doing a blocking accept(), the others (one for each client) doing a blocking read()

Each blocking call ends in the evaluation of a message (creation of a "client" object for the client manager, evaluation of the message contained in the protocol for the client itself). Each thread can either delegate to the main thread the execution of this message or evaluate it inside the thread. This would require locking the objects and therefore delegating (via a message fifo) the message evaluation to the main thread is the only possible solution.

Client thread:
 - synchronization: a list of file descriptors polled by a blocking select()
 - inter-thread messaging: to main thread only, non-blocking.


2-2 MIDI thread

This thread can be either the MIDI callback on Mac OS X or a simulation of this thread using a Posix thread and a blocking I/O.

The MIDI thread, after decoding the MIDI event, passes it in a message to the main thread. 

MIDI thread:
 - synchronization: MIDI input
 - inter-thread messaging: to main thread only, non-blocking.


2-3 Control threads

A control thread can be used to evaluate messages at a lower priority. It has an incoming (from main thread) and an outgoing (to main thread) message fifos. 

The way to represent at the patch programmer level the control thread is not precised yet (objects, patches, ...)

Control thread:
 - synchronization: input from main thread
 - inter-thread messaging: both directions, from main thread is blocking; to main thread is non-blocking.


2-4 Asynchronous file server threads

A pool of threads can be used to read (and write) files asynchronously. 

Asynchronous file server threads:
 - synchronization: input from main thread
 - inter-thread messaging: both directions, from main thread is blocking; to main thread is non-blocking.

(i.e. asynchronous file server threads and control threads are identical).





***************************************************************
To be completed
***************************************************************

A thread has:
 one parent
 two fifo: from_parent and to_parent


threads        MIDI   client   control   async file
pthread        no     yes      yes       yes
to_parent      yes    yes      yes       yes
from_parent    no     no       yes       yes

Reading from parent is always blocking.

One thread == one synchronization source

Base class: 
 fts_fifo_t *to_parent, *from_parent;
 synchronization material for from_parent reading (cond,mutex)

100 % callback based : a thread is a callback, called from a synchronization loop ???



From the previous list, we can derive a standard model for a thread main loop (in the case
the loop is started from FTS and not trigged by a callback):
 - poll input fifos
 - call one thread function

The input fifos is always blocking.

The threads can be hierarchical and organized in a parent-child
way, as the Unix processes.

Each thread has a list of fifos of child threads, fifos are polled at each tick.
Can be also a list of functions as in current scheduler, but this implies one more
function call by pointer



4- Inter-thread communication

Inter-thread communication can be implemented by message fifos. The 
